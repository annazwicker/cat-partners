_db.collection(stationColRef)

// Create a reference to the cities collection
final citiesRef = db.collection("cities");

// Create a query against the collection.
final query = citiesRef.where("state", isEqualTo: "CA");

final capitalcities =
    db.collection("cities").where("capital", isEqualTo: true);


db.collection("cities").where("capital", isEqualTo: true).get().then(
  (querySnapshot) {
    print("Successfully completed");
    for (var docSnapshot in querySnapshot.docs) {
      print('${docSnapshot.id} => ${docSnapshot.data()}');
    }
  },
  onError: (e) => print("Error completing: $e"),
);




final citiesRef = db.collection("cities");
final stateQuery = citiesRef.where("state", isEqualTo: "CA");
final populationQuery = citiesRef.where("population", isLessThan: 100000);
final nameQuery = citiesRef.where("name", isEqualTo: "San Francisco");


Home Page

1. retrieve empty feeder slots for today and tomorrow


final entryRef = _db.collection("entry");
final emptySlotsQuery = entryRef.where("date", isGreaterThanOrEqualTo: Today);

2. retrieve number of feeder entries the user has filled out


final entryRef = _db.collection("entry");
final feederCount = entryRef.where("user", isEqualTo: user);

3. retrieve x number of user entries starting today

final entryRef = _db.collection("entry");
final feederCount = entryRef.where("date", isGreaterThanOrEqualTo: Today).where("user", isEqualTo: user);



ABOUT Page

1. just the cat pictures



Account Page

1. save and retrieve first name, last name, email, phone number, status, rescue group



Admin Page
1. retrieve users from email, delete those users
2. retrieve admin users' first and last names
3. retrieve cat names -- delete cat
        add new cat
4. retrieve feeding stations
        add new station
5. retrieve users based on first name, last name, email

6. csv for user entries in given date
        


Feeder Page

1. 3 weeks from current date of entries
2. 




