import 'package:cloud_firestore/cloud_firestore.dart';
import '../components/types_and_funcs.dart';

class FieldChecker {

  /// Verifies this field. If something is wrong with the input, error
  /// messages are returned. If the input is valid, an empty list is returned.
  final List<String> Function(Object? input) verifier;

  FieldChecker(this.verifier);

  /// Returns a FieldChecker which verifies that inputs are of the given
  /// type.
  static FieldChecker typeChecker<T>(){
    List<String> function(Object? input) {
      List<String> list = [];
      if(input is! T){
        list.add('Field is not of type $T: $input');
      }
      return list;
    }
    return FieldChecker(function);
  }


  /// Returns a FieldChecker which verifies that inputs are type 
  /// [DocumentReference], and reference a document in a collection with the
  /// given ID. Input may be null if indicated as such.
  static FieldChecker docRefChecker(String collectionID, {bool nullable = false}) {
    List<String> function(Object? input) {
      List<String> list = [];

      // Allow null values if nullable
      if(nullable && input == null) { return []; }

      // Must be a docref
      if(input is! DocumentReference){
        list.add("Field is not a DocumentReference: $input");
      } else {
        // Must be a ref in given colleciton
        DocumentReference docRef = input;
        if(docRef.parent.id != collectionID) {
          list.add("Field is not a reference to a "
            "document in $collectionID: $docRef");
        }
      }
      return list;
    }
    return FieldChecker(function);
  }
}

/// Contains methods for verifying that a document satisfies a group of checks.
/// Includes checkers for each field, and checks upon the document as a whole.
class DocChecker {

  /// Verifies the entire input against additional checks. Returns any
  /// error messages generated during verification. If the input is valid,
  /// an empty list is returned. 
  /// 
  /// Only run if all field verifiers pass. 
  final List<String> Function(Json input) _finalVerifier;
  
  /// Maps the names of fields to the FieldCheckers that verify their respective
  /// data.
  final Map<String, FieldChecker> _fieldVerifiers;

  DocChecker(this._fieldVerifiers, this._finalVerifier);

  List<String> verify(Json input){
    List<String> errorMessages = [];
    // Check each field
    for(var entry in _fieldVerifiers.entries){
      var (fieldName, checker) = (entry.key, entry.value);
      // Add any error messages generated by field check
      errorMessages.addAll(checker.verifier(input[fieldName]));
    }
    // Check doc as a whole
    if(errorMessages.isEmpty) {
      errorMessages.addAll(_finalVerifier(input));
    }
    return errorMessages;
  }

  List<String> verifySnapshot(DocumentSnapshot<Json> snapshot) {
    // TODO throw some custom exception when snapshot data doesn't exist.
    // Right now this just throws a NullPointer error.
    Json data = snapshot.data()!;
    return verify(data);
  }

}
